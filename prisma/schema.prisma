// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents a user in the system.
model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  firstName    String
  lastName     String
  createdAt    DateTime       @default(now())

  /// Groups this user owns
  groups       Group[]        @relation("GroupOwner")

  /// Groups this user is a member of
  members      GroupMember[]

  /// Join requests submitted by this user
  JoinRequest  JoinRequest[]

  /// Records of groups the user is banned from
  GroupBan     GroupBan[]

  /// Messages the user has sent
  GroupMessage GroupMessage[]
}

/// Represents a group, which has members, an owner, and messages.
model Group {
  id         String    @id @default(uuid())
  name       String
  type       GroupType
  ownerId    String
  maxMembers Int
  createdAt  DateTime  @default(now())

  /// The user who owns this group
  owner        User           @relation("GroupOwner", fields: [ownerId], references: [id])

  /// Members in this group
  members      GroupMember[]

  /// Requests to join this group
  requests     JoinRequest[]

  /// Users who are banned from this group
  GroupBan     GroupBan[]

  /// Messages sent in this group
  GroupMessage GroupMessage[]

  @@map("groups")
}

/// Links a user to a group as a member with a specific role.
model GroupMember {
  id         String    @id @default(uuid())
  userId     String
  groupId    String

  /// Role the user has in the group (MEMBER, ADMIN, OWNER)
  role       GroupRole @default(MEMBER)

  /// Timestamp when the user joined the group
  joinedAt   DateTime  @default(now())

  /// Optional timestamp if the user was banished
  banishedAt DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

/// Tracks requests from users to join a group.
model JoinRequest {
  id        String        @id @default(uuid())
  userId    String
  groupId   String

  /// Status of the join request (PENDING, APPROVED, REJECTED)
  status    RequestStatus @default(PENDING)

  createdAt DateTime      @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

/// Represents a user who has been banned from a group.
model GroupBan {
  id        String   @id @default(uuid())
  userId    String
  groupId   String

  /// If true, the ban is permanent
  permanent Boolean  @default(false)

  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

/// A message sent by a user in a group chat.
model GroupMessage {
  id        String   @id @default(uuid())
  groupId   String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender User  @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

/// Enum indicating whether a group is public or private.
enum GroupType {
  PUBLIC
  PRIVATE
}

/// Enum defining user roles within a group.
enum GroupRole {
  MEMBER
  ADMIN
  OWNER
}

/// Enum indicating the status of a join request.
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}